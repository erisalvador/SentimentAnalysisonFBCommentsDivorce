# -*- coding: utf-8 -*-
"""Code_BaselineFramework.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vQMUOyNlELezwgXULvWi7ljY30H5SMTe

# Marital Sentiment Orientation of Filipinos on the Absolute Divorce Bill: Evidence via a Natural Language Processing Approach

## Imports and Constants
"""

from textblob import TextBlob
import pandas as pd
from gensim.models import Word2Vec
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import networkx as nx

def baiduLSTMClassification(text):
    analysis = TextBlob(text)
    return 'positive' if analysis.sentiment.polarity > 0 else 'negative'

def word2vecTokenization(negativeText):
    sentences = [negativeText.split()]  # Assume simple split by whitespace
    model = Word2Vec(sentences, vector_size=100, window=5, min_count=1, workers=4)
    tokens = list(model.wv.key_to_index.keys())
    return tokens

def wordCloudAnalysisAndVisualization(tokens):
    wordcloud = WordCloud(width=800, height=400).generate(' '.join(tokens))
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis("off")
    plt.show()

def textrankSorting(tokens):
    graph = nx.Graph()
    graph.add_nodes_from(tokens)
    for token in tokens:
        for other_token in tokens:
            if token != other_token:
                graph.add_edge(token, other_token)
    scores = nx.pagerank(graph)
    sorted_tokens = sorted(scores, key=scores.get, reverse=True)
    return sorted_tokens

def main():
    # Example corpus
    corpus = ["This new policy on divorce has been controversial and upsetting to many.",
              "The recent changes have brought happiness and relief to several individuals.",
              "Divorce is now seen as a viable option for distressed marriages, which is good."]

    # Perform sentiment classification on the corpus
    sentimentResult = [baiduLSTMClassification(text) for text in corpus]
    print("Sentiment Results:", sentimentResult)

    # Extract the text associated with negative sentiment
    negativeText = [corpus[i] for i in range(len(corpus)) if sentimentResult[i] == 'negative']
    print("Negative Texts:", negativeText)

    # Tokenize the text associated with negative sentiment using Word2Vec
    negativeTokens = [word2vecTokenization(text) for text in negativeText]

    # Conduct word cloud analysis and visualization
    for tokens in negativeTokens:
        wordCloudAnalysisAndVisualization(tokens)

    # Utilize TextRank for sorting the tokenized words
    sortedTokens = [textrankSorting(tokens) for tokens in negativeTokens]

    # Output the sorted tokens
    for tokens in sortedTokens:
        print("Sorted Tokens:", tokens)

main()